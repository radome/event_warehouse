#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require File.expand_path('../config/environment', __dir__)

# Command line application for spawning amqp consumers
class Load < Thor
  include Thor::Actions

  desc 'main', 'Starts an AMQP consumer on the main queue'
  def main
    consumer(:main)
  end

  desc 'deadletter', 'Starts an AMQP consumer on the dead letter queue'
  def deadletter
    consumer(:deadletter) do
      # Messages from the dead letter queue are in a different format.
      define_method(:received) do |metadata, payload|
        insert_record(metadata, ActiveSupport::JSON.decode(ActiveSupport::JSON.decode(payload)['message']))
      end

      # Dead lettering of dead letters make no sense, so just log the information for later.
      define_method(:prepare_deadlettering) do
        lambda do |metadata, payload, exception|
          error(metadata) { "Cannot process message due to #{exception.message}: #{payload.inspect}" }
        end
      end
    end
  end

  no_tasks do
    private

    def consumer(queue_configuration, &block)
      AmqpConsumer.new(EventWarehouse::Application.config.amqp.send(queue_configuration)).tap do |consumer|
        consumer.instance_eval(&block) if block_given?
      end.run
    end
  end
end

Load.start
